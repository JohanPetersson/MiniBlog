<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Using EPiServer Find's Unified Search in EPiServer 6</title>
  <slug>using-episerver-finds-unified-search-in-episerver-6</slug>
  <author>Johan</author>
  <pubDate>2013-02-25 18:30:00</pubDate>
  <lastModified>2013-11-13 05:26:04</lastModified>
  <content>
		
		
		
		
		&lt;p&gt;So you've read Joels &lt;a href="http://joelabrahamsson.com/entry/new-in-episerver-find-unified-search"&gt;blogpost about Unified Search&lt;/a&gt; and want to try it out, great! It's actually — what I think — one of the cooler features of Find when it comes to actual search and not just querying for data. Too bad it's just for EPiServer 7, luckily some of the parts are backported to EPiServer 6.&lt;/p&gt;

&lt;p&gt;So what's missing? We have to do most of the plumbing and hook up Find correctly, so everything is indexed, and we also have to add our own filters that resembles EPiServer's &lt;a href="http://sdk.episerver.com/library/cms6/html/T_EPiServer_Filters_FilterForVisitor.htm"&gt;FilterForVisitors&lt;/a&gt;. All of this could easily be done by EPiServer in a couple of days, but hey, we don't want to wait for that and it's not certain that this ever will be fully backported to EPiServer 6.&lt;/p&gt;
&lt;p&gt;First you need to install Find, if you're going with nuget remember to specify the correct version so we don't get the EPiServer 7 Integration. You can find the instructions under My Services &amp;gt; Download .NET Api at &lt;a href="http://find.episerver.com"&gt;find.episerver.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you're using Page Type Builder you can implement the ISearchContent interface in a base class, some of the methods are implemented by default and some we want to override. In my example we're not actually implementing the interface but just overriding some of the properties by adding properties with the same name.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;namespace DV.PageTypes
{
    using System;
    using PageTypeBuilder;

    public abstract class PageTypeBase : TypedPageData
    {
        public string SearchTitle
        {
            get { return this.Property.ExistsLocally("PageTitle") &amp;amp;&amp;amp; this["PageTitle"] != null ? this["PageTitle"].ToString() : this.PageName; }
        }

        public string SearchHitUrl
        {
            get { return this.ExternalURL(); }
        }

        public string SearchSection
        {
            get
            {
                PageData sectionPage = this;

                while (!sectionPage.ParentLink.CompareToIgnoreWorkID(PageReference.EmptyReference) &amp;amp;&amp;amp;
                       !sectionPage.ParentLink.CompareToIgnoreWorkID(PageReference.StartPage) &amp;amp;&amp;amp;
                       !sectionPage.ParentLink.CompareToIgnoreWorkID(PageReference.RootPage))
                {
                    sectionPage = DataFactory.Instance.GetPage(sectionPage.ParentLink);
                }

                if (!sectionPage.PageLink.CompareToIgnoreWorkID(PageReference.StartPage))
                {
                    return sectionPage.PageName;
                }

                return string.Empty;
            }
        }

        public string SearchHitTypeName
        {
            get { return "Web page"; }
        }

        public string SearchTypeName
        {
            get
            {
                if (this.PageTypeID == 1)
                {
                    return "News";
                }

                if (this.PageTypeID == 2)
                {
                    return "Contact persons";
                }

                return "Other";
            }
        }

        public DateTime? SearchPublishDate
        {
            get { return this.Changed; }
        }

        public DateTime? SearchUpdateDate
        {
            get { return this.StartPublish; }
        }
    }
}

&lt;/pre&gt;
&lt;p&gt;We also have to tell Find which types we want in our Unified  Search, in EPiServer 7 PageData and UnifiedFile is added automatically. This is preferredly done in an InitializableModule. Notice that we also adds a filter for each type, more on that later. For UnifiedFiles we can't obviously use a base class, so here we have to  go with extension methods. For some reason a property with the name  Attachment is added automatically, but Unified Search expects a property  with the name SearchAttachment. So first we have to remove the default  and add our own.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;var fileTypesToIndex = new List&amp;lt;string&amp;gt;
{
    ".txt",
    ".pdf",
    ".doc",
    ".docx",
    ".rtf",
    ".htm",
    ".html",
    ".xls",
    ".xlsx"
};

SearchClient.Instance.Conventions.UnifiedSearchRegistry.Add&amp;lt;PageData&amp;gt;().PublicSearchFilter(c =&amp;gt; c.BuildFilter&amp;lt;PageData&amp;gt;().FilterForVisitor&amp;lt;PageData&amp;gt;());
SearchClient.Instance.Conventions.UnifiedSearchRegistry.Add&amp;lt;UnifiedFile&amp;gt;().PublicSearchFilter(c =&amp;gt; c.BuildFilter&amp;lt;UnifiedFile&amp;gt;().FilterOnUnifiedFileReadAccess());

FileIndexer.Instance.Conventions.ShouldIndexVPPConvention = new VisibleInFilemanagerVPPIndexingConvention();
FileIndexer.Instance.Conventions.ForInstancesOf&amp;lt;UnifiedFile&amp;gt;().ShouldIndex(x =&amp;gt; fileTypesToIndex.Contains(x.Extension));

PageIndexer.Instance.Conventions.EnablePageFilesIndexing();

SearchClient.Instance.Conventions.ForInstancesOf&amp;lt;UnifiedFile&amp;gt;()
    .ExcludeField(file =&amp;gt; file.Attachment()) // Exclude the default Attachment
    .IncludeField(file =&amp;gt; file.SearchFilename())
    .IncludeField(file =&amp;gt; file.SearchFileExtension())
    .IncludeField(file =&amp;gt; file.SearchHitUrl())
    .IncludeField(file =&amp;gt; file.SearchAttachment()) // Include our extened Attachment
    .IncludeField(file =&amp;gt; file.SearchPublishDate())
    .IncludeField(file =&amp;gt; file.SearchUpdateDate())
    .IncludeField(file =&amp;gt; file.SearchHitTypeName())
    .IncludeField(file =&amp;gt; file.SearchSubsection())
    .IncludeField(file =&amp;gt; file.SearchTitle());
&lt;/pre&gt;
&lt;p&gt;Here are some example extensions for UnifiedFile:&lt;/p&gt;
&lt;pre class="prettyprint"&gt;namespace DV.Extensions
{
    using EPiServer;
    using EPiServer.Find;
    using EPiServer.Find.Cms;
    using EPiServer.Web.Hosting;
    using System;
    using System.Text;

    public static class UnifiedFileExtensions
    {
        public static string SearchFilename(this UnifiedFile file)
        {
            return file.VirtualPath;
        }

        public static string SearchFileExtension(this UnifiedFile file)
        {
            return file.Extension;
        }

        public static Attachment SearchAttachment(this UnifiedFile file)
        {
            return file.Attachment();
        }

        public static string SearchTitle(this UnifiedFile file)
        {
            return file.Summary != null &amp;amp;&amp;amp; !string.IsNullOrWhiteSpace(file.Summary.Title) ? file.Summary.Title : file.Name;
        }

        public static string SearchHitUrl(this UnifiedFile file)
        {
            var fileUrlBuilder = new UrlBuilder(file.PermanentLinkVirtualPath);

            Global.UrlRewriteProvider.ConvertToExternal(fileUrlBuilder, null, Encoding.UTF8);

            var url = new UriBuilder(EPiServer.Configuration.Settings.Instance.SiteUrl);

            url.Path = fileUrlBuilder.ToString();

            return url.Uri.AbsoluteUri;
        }

        public static DateTime? SearchPublishDate(this UnifiedFile file)
        {
            return file.Created;
        }

        public static DateTime? SearchUpdateDate(this UnifiedFile file)
        {
            return file.Changed;
        }

        public static string SearchHitTypeName(this UnifiedFile file)
        {
            if (!string.IsNullOrEmpty(file.Extension))
            {
                var extension = file.Extension.Replace(".", string.Empty).ToLower();

                switch (extension)
                {
                    case "asp":
                    case "aspx":
                    case "html":
                    case "htm":
                    case "jsp":
                    case "php":
                        return "Webpages";
                    case "docx":
                    case "doc":
                        return "Word";
                    case "pages":
                        return "Pages";
                    case "pdf":
                        return "PDF";
                    case "pps":
                    case "ppt":
                    case "ppsx":
                    case "pptx":
                        return "PowerPoint";
                    case "key":
                        return "Keynote";
                    case "xls":
                    case "xlsx":
                        return "Excel";
                    case "rtf":
                    case "txt":
                    case "text":
                        return "Text";
                    case "bmp":
                    case "dwg":
                    case "gif":
                    case "jpg":
                    case "jpeg":
                    case "png":
                    case "psd":
                    case "tif":
                        return "Images";
                    case "7z":
                    case "zip":
                    case "zipx":
                    case "rar":
                    case "sit":
                        return "Compressed files";
                    default:
                        return extension;
                }
            }

            return string.Empty;
        }

        public static string SearchTypeName(this UnifiedFile page)
        {
            return "Other";
        }
    }
}
&lt;/pre&gt;
&lt;p&gt;If you're not using Page Type Builder you can create extension methods for PageData with the same name for every property in ISearchContent and add them to the indexing conventions. The implementations are quite easy and straight forward so I'm not gonna post example code for that. SearchText is already implemented in the &lt;em&gt;EPiServer.Find.Cms&lt;/em&gt; namespace though, so add a using statement for that namespace.&lt;/p&gt;
&lt;pre class="prettyprint"&gt;SearchClient.Instance.Conventions.ForInstancesOf&amp;lt;PageData&amp;gt;()
    .IncludeField(page =&amp;gt; page.SearchText())
    .IncludeField(page =&amp;gt; page.SearchHitTypeName())
    .IncludeField(page =&amp;gt; page.SearchHitUrl())
    .IncludeField(page =&amp;gt; page.SearchPublishDate())
    .IncludeField(page =&amp;gt; page.SearchSection())
    .IncludeField(page =&amp;gt; page.SearchTitle())
    .IncludeField(page =&amp;gt; page.SearchTypeName())
    .IncludeField(page =&amp;gt; page.SearchUpdateDate());

&lt;/pre&gt;
&lt;p&gt;As I mentioned before we added filters for each type. Those are added by default in the EPiServer 7 Integration, for EPiServer 6 they don't exists. So I've backported them by using Reflector and by verifying the outgoing requests' JSON. I've uploaded this code to EPiServer World because they are about about 200 lines of code, you can find them &lt;a href="http://world.episerver.com/Code/Johan-Pettersson/EPiServer-Find-Filters/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some caveats using Unified Search with EPiServer 6, for instance pages are not re-indexed when the access rights are changed for pages and files. To be safe, enable the scheduled indexing job, so the ACLs are updated at least every night.&lt;/p&gt;
&lt;p&gt;If you have any questions or found any bugs, please let me know.&lt;/p&gt;
&lt;p&gt;Hope this helps and happy searching!&lt;/p&gt;
	
	
	
	
	</content>
  <ispublished>true</ispublished>
  <categories>
    <category>EPiServer</category>
  </categories>
  <comments></comments>
</post>