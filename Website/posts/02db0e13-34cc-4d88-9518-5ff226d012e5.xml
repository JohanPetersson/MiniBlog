<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Seo tip: canonical domain</title>
  <slug>seo-tip-canonical-domain</slug>
  <author>Johan</author>
  <pubDate>2011-10-30 13:46:00</pubDate>
  <lastModified>2013-11-13 05:36:56</lastModified>
  <content>
		&lt;p&gt;One really big enhancement is canonical urls for your/customers content. I’m sure you all know about the problem with duplicated content, but not everyone tend to fix it. Here’s my take on it.&lt;/p&gt;

&lt;pre class="prettyprint"&gt;namespace DV.HttpModules
{
    using System;
    using System.Web;

    public class CanonicalDomainModule : IHttpModule
    {
        public delegate void CanonicalDomainEventHandler(UriBuilder url);

        public static event CanonicalDomainEventHandler BeforeChangingDomain;
        public static event CanonicalDomainEventHandler AfterChangingDomain;

        void IHttpModule.Dispose()
        {

        }

        void IHttpModule.Init(HttpApplication context)
        {
            context.BeginRequest += new EventHandler(this.RedirectDomains);
        }

        private void RedirectDomains(object sender, EventArgs e)
        {
            HttpApplication application = sender as HttpApplication;
            UriBuilder requestedUrl = new UriBuilder(application.Context.Request.Url);

            string siteHost = EPiServer.Configuration.Settings.Instance.SiteUrl.Host;

            if (!requestedUrl.Host.Equals(siteHost, StringComparison.OrdinalIgnoreCase))
            {
                if (BeforeChangingDomain != null)
                {
                    BeforeChangingDomain(requestedUrl);
                }

                requestedUrl.Host = siteHost;

                if (AfterChangingDomain != null)
                {
                    AfterChangingDomain(requestedUrl);
                }

                string location = requestedUrl.Uri.GetComponents(
                    UriComponents.Scheme |
                    UriComponents.Host |
                    UriComponents.Path |
                    UriComponents.Query |
                    UriComponents.Fragment,
                    UriFormat.Unescaped);

                this.PermanentRedirect(application, location);
            }
        }

        private void PermanentRedirect(HttpApplication application, string location)
        {
            application.Context.Response.Clear();
            application.Context.Response.Status = "301 Moved Permanently";
            application.Context.Response.AddHeader("Location", location);
            application.Context.Response.End();
        }
    }
}&lt;/pre&gt;
&lt;p&gt;Modules are executed in the order they are configured. So if we register it before EPiServer’s UrlRewriteModule the url will not be rewritten when the module is executed, not a big deal in this case, but just remember it.&lt;/p&gt;
	</content>
  <ispublished>true</ispublished>
  <categories>
    <category>Episerver</category>
  </categories>
  <comments></comments>
</post>